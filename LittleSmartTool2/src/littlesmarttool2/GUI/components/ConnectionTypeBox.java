/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package littlesmarttool2.GUI.components;

import java.awt.event.ItemListener;
import javax.swing.ButtonGroup;
import littlesmarttool2.model.*;

/**
 *
 * @author marcher89
 */
public class ConnectionTypeBox extends javax.swing.JPanel {

    private ConnectionType connectionType;
    
    /**
     * Creates new form ConnectionTypeBox
     */
    public ConnectionTypeBox(ConnectionType connetionType) {
        this.connectionType = connetionType;
        
        initComponents();
        
        switch(connetionType){
            case IR:
                radioButton.setText("IR");
                description.setText("<html>An IR (infrared) connection requires the use of the supplied IR cable/diode.<br/>The diode should be positioned as close to the cameras IR receiver as possible.</html>");
                break;
            case Wire:
                radioButton.setText("Wire");
                description.setText("<html>The Wire connection uses a standard Wire cable connected directly to a port on the camera.</html>");
                break;
            case LANC:
                radioButton.setText("LANC");
                description.setText("<html>The LANC connection uses a cable directly connected to the camera.</html>");
                break;
        }
    }
    
    public ConnectionType getConnectionType() {
        return connectionType;
    }

    @Override
    public void setEnabled(boolean b){
        super.setEnabled(b);
        radioButton.setEnabled(b);
        description.setEnabled(b);
    }
    
    public boolean isSelected() {
        return radioButton.isSelected();
    }
    
    public void setSelected(boolean b) {
        radioButton.setSelected(b);
    }

    public void addToGroup(ButtonGroup group) {
        group.add(radioButton);
    }
    
    public void addItemListener(ItemListener itemListener) {
        radioButton.addItemListener(itemListener);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButton = new javax.swing.JRadioButton();
        description = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(1200, 39));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        radioButton.setText("jRadioButton1");
        add(radioButton);

        description.setLabelFor(radioButton);
        description.setText("jLabel1");
        add(description);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (super.isEnabled())
            radioButton.setSelected(true);
    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        if (super.isEnabled())
            radioButton.setSelected(true);
    }//GEN-LAST:event_formMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel description;
    private javax.swing.JRadioButton radioButton;
    // End of variables declaration//GEN-END:variables


  

    
}
