/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package littlesmarttool2.GUI.components;

import java.awt.BorderLayout;
import java.util.ArrayList;
import littlesmarttool2.model.Block;
import littlesmarttool2.model.Channel;
import littlesmarttool2.model.Command;
import littlesmarttool2.model.ControlType;
/**
 *
 * @author Rasmus
 */
public class ChannelConfigurator extends javax.swing.JPanel {
    private Channel channel = new Channel(-1);
    private InputViewer viewer;
    private int lastValue;
    
    /**
     * Creates new form ChannelConfigurator
     */
    public ChannelConfigurator() {
        initComponents();
        viewer = stickInputViewer1;
        idLabel.setText("Ch. " + channel.getId());
    }
    
    public void setChannel(Channel channel)
    {
        this.channel = channel;
        idLabel.setText("Ch. " + channel.getId());
    }
    
    public void updateReading(int reading)
    {
        if (reading > 2500 || reading < 500) return; //Must be invalid. TODO: Calibration guidance
        resetCalibButton.setEnabled(true);
        lastValue = reading;
        channel.setCalibLow(Math.min(channel.getCalibLow(), reading));
        channel.setCalibHigh(Math.max(channel.getCalibHigh(), reading));
        viewer.updateBounds(channel.getCalibLow(), channel.getCalibHigh());
        viewer.updateValue(reading);
    }

    private void changeInputViewer(InputViewer newViewer)
    {
        inputViewerPanel.removeAll();
        viewer = newViewer;
        inputViewerPanel.add(viewer, BorderLayout.CENTER);
        inputViewerPanel.revalidate();
    }
    private void tryDefaultDivide(ControlType type)
    {
        ArrayList<Block> blocks = channel.getSetting().getBlocks();
         //Don't do anything if settings were made
        if (blocks.size() > 5 || blocks.size() == 4) return;
        for (Block b : blocks)
        {
            if (b.getCommand() != Command.getNothingCommand())
                return;
        }
        //No settings were made. Divide
        channel.getSetting().defaultDivision(type);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controllerTypeGroup = new javax.swing.ButtonGroup();
        idPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();
        radioButtonPanel = new javax.swing.JPanel();
        radioPushButton = new javax.swing.JRadioButton();
        radio2Way = new javax.swing.JRadioButton();
        radio3Way = new javax.swing.JRadioButton();
        radioStick = new javax.swing.JRadioButton();
        inputViewerPanel = new javax.swing.JPanel();
        stickInputViewer1 = new littlesmarttool2.GUI.components.StickInputViewer();
        calibrationPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        resetCalibButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(400, 60));
        setLayout(new java.awt.BorderLayout());

        idPanel.setPreferredSize(new java.awt.Dimension(50, 324));
        idPanel.setLayout(new javax.swing.BoxLayout(idPanel, javax.swing.BoxLayout.LINE_AXIS));

        idLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        idLabel.setText("Ch. 1");
        idPanel.add(idLabel);

        add(idPanel, java.awt.BorderLayout.WEST);

        contentPanel.setLayout(new java.awt.BorderLayout());

        radioButtonPanel.setPreferredSize(new java.awt.Dimension(100, 300));
        radioButtonPanel.setLayout(new java.awt.GridLayout(0, 1));

        controllerTypeGroup.add(radioPushButton);
        radioPushButton.setText("Push button");
        radioPushButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioPushButtonItemStateChanged(evt);
            }
        });
        radioButtonPanel.add(radioPushButton);

        controllerTypeGroup.add(radio2Way);
        radio2Way.setText("2-way switch");
        radio2Way.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio2WayItemStateChanged(evt);
            }
        });
        radioButtonPanel.add(radio2Way);

        controllerTypeGroup.add(radio3Way);
        radio3Way.setText("3-way switch");
        radio3Way.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radio3WayItemStateChanged(evt);
            }
        });
        radioButtonPanel.add(radio3Way);

        controllerTypeGroup.add(radioStick);
        radioStick.setSelected(true);
        radioStick.setText("Stick");
        radioStick.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                radioStickItemStateChanged(evt);
            }
        });
        radioButtonPanel.add(radioStick);

        contentPanel.add(radioButtonPanel, java.awt.BorderLayout.WEST);

        inputViewerPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout stickInputViewer1Layout = new javax.swing.GroupLayout(stickInputViewer1);
        stickInputViewer1.setLayout(stickInputViewer1Layout);
        stickInputViewer1Layout.setHorizontalGroup(
            stickInputViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
        );
        stickInputViewer1Layout.setVerticalGroup(
            stickInputViewer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 54, Short.MAX_VALUE)
        );

        inputViewerPanel.add(stickInputViewer1, java.awt.BorderLayout.CENTER);

        contentPanel.add(inputViewerPanel, java.awt.BorderLayout.CENTER);

        calibrationPanel.setPreferredSize(new java.awt.Dimension(100, 50));
        calibrationPanel.setLayout(new java.awt.BorderLayout());

        jPanel4.setMinimumSize(new java.awt.Dimension(250, 24));
        jPanel4.setPreferredSize(new java.awt.Dimension(250, 100));
        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.LINE_AXIS));

        resetCalibButton.setText("<html><center>Reset<br/>calibration</center></html>");
        resetCalibButton.setEnabled(false);
        resetCalibButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetCalibButtonActionPerformed(evt);
            }
        });
        jPanel4.add(resetCalibButton);

        calibrationPanel.add(jPanel4, java.awt.BorderLayout.CENTER);

        contentPanel.add(calibrationPanel, java.awt.BorderLayout.EAST);

        add(contentPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void radioPushButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioPushButtonItemStateChanged
        if (!radioPushButton.isSelected()) return;
        channel.setControlType(ControlType.PushButton);
        tryDefaultDivide(ControlType.PushButton);
        changeInputViewer(new PushbuttonInputViewer());
    }//GEN-LAST:event_radioPushButtonItemStateChanged

    private void radio2WayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio2WayItemStateChanged
        if (!radio2Way.isSelected()) return;
        channel.setControlType(ControlType.Switch2);
        tryDefaultDivide(ControlType.Switch2);
        NWayInputViewer nw = new NWayInputViewer(2);
        changeInputViewer(nw);
    }//GEN-LAST:event_radio2WayItemStateChanged

    private void radio3WayItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radio3WayItemStateChanged
        if (!radio3Way.isSelected()) return;
        channel.setControlType(ControlType.Switch3);
        tryDefaultDivide(ControlType.Switch3);
        NWayInputViewer nw = new NWayInputViewer(3);
        changeInputViewer(nw);
    }//GEN-LAST:event_radio3WayItemStateChanged

    private void radioStickItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_radioStickItemStateChanged
        if (!radioStick.isSelected()) return;
        channel.setControlType(ControlType.Stick);
        tryDefaultDivide(ControlType.Stick);
        changeInputViewer(new StickInputViewer());
    }//GEN-LAST:event_radioStickItemStateChanged

    private void resetCalibButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetCalibButtonActionPerformed
        resetCalibButton.setEnabled(false);
        channel.setCalibLow(lastValue);
        channel.setCalibHigh(lastValue);
        viewer.updateBounds(channel.getCalibLow(), channel.getCalibHigh());
        viewer.updateValue(lastValue);
    }//GEN-LAST:event_resetCalibButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel calibrationPanel;
    private javax.swing.JPanel contentPanel;
    private javax.swing.ButtonGroup controllerTypeGroup;
    private javax.swing.JLabel idLabel;
    private javax.swing.JPanel idPanel;
    private javax.swing.JPanel inputViewerPanel;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton radio2Way;
    private javax.swing.JRadioButton radio3Way;
    private javax.swing.JPanel radioButtonPanel;
    private javax.swing.JRadioButton radioPushButton;
    private javax.swing.JRadioButton radioStick;
    private javax.swing.JButton resetCalibButton;
    private littlesmarttool2.GUI.components.StickInputViewer stickInputViewer1;
    // End of variables declaration//GEN-END:variables
}
