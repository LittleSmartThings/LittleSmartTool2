/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package littlesmarttool2.GUI;

import java.util.ArrayList;
import littlesmarttool2.GUI.components.ChannelTabPanel;
import littlesmarttool2.comm.ResponseListener;
import littlesmarttool2.model.Channel;

/**
 *
 * @author marcher89
 */
public class Step3Panel extends StepPanel implements ResponseListener {

    ChannelTabPanel[] tabs = new ChannelTabPanel[4];
    /**
     * Creates new form Step1Panel
     */
    public Step3Panel(SS2Wizard wizard) {
        super(wizard);
        initComponents();
        
        
    }
    
    @Override
    public void onDisplay() {
        jTabbedPane1.removeAll();
        ArrayList<Channel> channels = wizard.getConfiguration().getChannels();
        for (int i = 0; i < channels.size(); i++)
        {
            if (!channels.get(i).isCalibrated())
                continue;
            tabs[i] = new ChannelTabPanel(wizard.getConfiguration());
            tabs[i].setChannel(channels.get(i));
            jTabbedPane1.addTab("Channel " + (i+1), tabs[i]);
        }
    }

    @Override
    public void onHide() {
        //TODO: Do anything??
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();

        setName("Configure triggers and actions"); // NOI18N
        setLayout(new java.awt.BorderLayout());
        add(jTabbedPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void receiveResponse(char command, String[] args) {
        if (command != 'S') return;
        if (args.length < 4) return;
        try
        {
            for (int i = 0; i < tabs.length; i++)
                tabs[i].updateChannelReading(Integer.parseInt(args[i]));
        }
        catch (Exception e)
        {}
    }
}
