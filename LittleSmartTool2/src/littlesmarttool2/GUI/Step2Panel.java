/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package littlesmarttool2.GUI;

import java.util.ArrayList;
import littlesmarttool2.comm.ResponseListener;
import littlesmarttool2.model.Channel;

/**
 *
 * @author marcher89
 */
public class Step2Panel extends StepPanel implements ResponseListener {
    private ArrayList<Channel> channels;
    private boolean isActive = false;
    /**
     * Creates new form Step2Panel
     */
    public Step2Panel(SS2Wizard wizard) {
        super(wizard);
        initComponents();
        channels = wizard.getConfiguration().getChannels();
        channelConfigurator1.setChannel(channels.get(0));
        channelConfigurator2.setChannel(channels.get(1));
        channelConfigurator3.setChannel(channels.get(2));
        channelConfigurator4.setChannel(channels.get(3));
    }
    
    @Override
    public void receiveResponse(char command, String[] args) {
        if (command != 'S') return;
        if (args.length < 4) return;
        try
        {
            channelConfigurator1.updateReading(Integer.parseInt(args[0]));
            channelConfigurator2.updateReading(Integer.parseInt(args[1]));
            channelConfigurator3.updateReading(Integer.parseInt(args[2]));
            channelConfigurator4.updateReading(Integer.parseInt(args[3]));
        }
        catch (Exception e)
        {}
        if (isActive)
            updateNextButton();
    }
    
    private void updateNextButton()
    {
        boolean isCalib = false;
        for (Channel c : channels)
        {
            if (c.isCalibrated())
                isCalib = true;
        }
        wizard.setNextEnabled(isCalib);
    }
    
    @Override
    public void onDisplay() {
        isActive = true;                                            
        wizard.getConfiguration().setTimelapse(false);
        updateNextButton();
    }

    @Override
    public void onHide() {
        isActive = false;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        timelapseButton = new javax.swing.JButton();
        channelConfigurator1 = new littlesmarttool2.GUI.components.ChannelConfigurator();
        channelConfigurator2 = new littlesmarttool2.GUI.components.ChannelConfigurator();
        channelConfigurator3 = new littlesmarttool2.GUI.components.ChannelConfigurator();
        channelConfigurator4 = new littlesmarttool2.GUI.components.ChannelConfigurator();

        setName("Choose control types and calibrate"); // NOI18N
        setLayout(new java.awt.GridLayout(5, 1, 0, 10));

        jPanel1.setMinimumSize(new java.awt.Dimension(200, 76));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("<html>\nSet up the channels you will be using by following these steps:\n<ol> \n\t<li>Connect to the StratoSnapper (top right corner)</li> \n\t<li>Choose the type of controller connected to each channel (skip the channels you don't use)</li> \n\t<li>Calibrate the software by moving your controller as far as it goes in both directions</li> \n</ol>\n</html>");
        jPanel1.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        jPanel2.setMaximumSize(new java.awt.Dimension(200, 100));
        jPanel2.setPreferredSize(new java.awt.Dimension(200, 100));
        jPanel2.setLayout(new java.awt.BorderLayout());

        timelapseButton.setText("Use timelapse");
        timelapseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timelapseButtonActionPerformed(evt);
            }
        });
        jPanel2.add(timelapseButton, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.EAST);

        add(jPanel1);
        add(channelConfigurator1);
        add(channelConfigurator2);
        add(channelConfigurator3);
        add(channelConfigurator4);
    }// </editor-fold>//GEN-END:initComponents

    private void timelapseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timelapseButtonActionPerformed
        wizard.getConfiguration().setTimelapse(true);
        wizard.goToNextStep();
    }//GEN-LAST:event_timelapseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private littlesmarttool2.GUI.components.ChannelConfigurator channelConfigurator1;
    private littlesmarttool2.GUI.components.ChannelConfigurator channelConfigurator2;
    private littlesmarttool2.GUI.components.ChannelConfigurator channelConfigurator3;
    private littlesmarttool2.GUI.components.ChannelConfigurator channelConfigurator4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton timelapseButton;
    // End of variables declaration//GEN-END:variables

}
